#!/usr/bin/env ruby

require 'fileutils'
require 'base64'
include FileUtils

lila_dir = pwd()
source_dir = lila_dir + '/public/piece/'
dest_dir = lila_dir + '/public/piece-css/'

chess_themes = [
  ['alpha', 'svg'],
  ['cburnett', 'svg'],
  ['merida', 'svg'],
  ['pirouetti', 'svg'],
  ['spatial', 'svg'],
  ['reillycraig', 'svg'],
  ['fantasy', 'svg'],
  ['shapes', 'svg'],
  ['companion', 'svg'],
  ['letter', 'svg'],
  ['leipzig', 'svg'],
  ['kosal', 'svg'],
  ['california', 'svg'],
  ['maestro', 'svg'],
  ['fresca', 'svg'],
  ['cardinal', 'svg'],
  ['gioco', 'svg'],
  ['tatiana', 'svg'],
  ['staunty', 'svg'],
  ['governor', 'svg'],
  ['libra', 'svg'],
  ['dubrovny', 'svg'],
]
draughts_themes = [
  ['wide_crown', 'svg'],
  ['fabirovsky','svg'],
  ['check_yb', 'png']
]
loa_themes = [
  ['wide', 'svg'],
  ['fabirovsky_loa', 'svg'],
  ['check_yb_loa','png']
]
shogi_themes = [
  ['2kanji', 'svg'],
  ['ctw', 'svg'],
  ['1kanji', 'svg']
]
xiangqi_themes = [
  ['2dhanzi', 'svg'],
  ['ct2', 'svg'],
  ['ct3', 'svg'],
  ['ct2w', 'svg'],
  ['euro', 'svg'],
  ['hnz', 'svg'],
  ['hnzw', 'svg'],
  ['wikim', 'svg'],
  ['ttxqhanzi', 'svg'],
  ['playok', 'svg'],
  ['ttxqintl', 'svg'],
  ['ka', 'svg']
]
flipello_themes = [
  ['classic_flipello', 'png'],
  ['check_yb_flipello', 'png'],
  ['marble_bw_flipello', 'png'],
  ['fabirovsky_flipello', 'svg']
]
amazons_themes = [
  ['queen', 'svg'],
  ['arrow', 'svg'],
  ['counter', 'svg'],
  ['counter_arrow', 'svg']
]
oware_themes = [
  ['red', 'svg'],
  ['green', 'svg'],
  ['blue', 'svg'],
  ['grey', 'svg'],
  ['green_numbers', 'svg'],
  ['green_seed', 'svg'],
]
togyzkumalak_themes = [
  ['black_gloss', 'svg'],
]
go_themes = [
  ['classic_stone', 'svg'],
  ['cross', 'svg']
]
backgammon_themes = [
   ['classic', 'svg'],
   ['contemporary', 'svg'],
   ['wooden', 'svg']
]
types = {
  'svg' => 'svg+xml;base64,',
  'png' => 'png;base64,'
}
roles = ['p-piece', 'n-piece', 'b-piece', 'r-piece', 'q-piece', 'k-piece']
colors = ['w', 'b']
chess_variants = ['standard','chess960', 'fromPosition', 'kingOfTheHill', 'threeCheck', 'fiveCheck', 'antichess', 'atomic',
'horde', 'racingKings', 'crazyhouse', 'noCastling', 'monster']
draughts_variants = ['international','frisian','frysk','antidraughts','breakthrough','russian','brazilian','pool', 'portuguese', 'english']
draughts_roles = ['man','king']
draughts_invert_colors = ['english']
lines_of_action_variants= ['linesOfAction', 'scrambledEggs']
lines_of_action_roles = ['l-piece']
flipello_roles = ['p-piece']
amazons_roles = ['q-piece', 'p-piece']
shogi_roles_to_imageprefix = [
    ['p-piece','FU'],
    ['l-piece','KY'],
    ['n-piece','KE'],
    ['k-piece','OU'], # white 'OU', black 'GY'
    ['k-piece','GY'], # white 'OU', black 'GY'
    ['s-piece','GI'],
    ['pp-piece','TO'],
    ['pl-piece','NY'],
    ['pn-piece','NK'],
    ['ps-piece','NG'],
    ['g-piece','KI'],
    ['b-piece','KA'],
    ['r-piece','HI'],
    ['pr-piece','RY'],
    ['pb-piece','UM']
  ]
shogi_colors = ['0','1']
xiangqi_roles =['a-piece', 'b-piece', 'c-piece', 'k-piece', 'n-piece', 'p-piece', 'r-piece', 'pp-piece']
xiangqi_colors = ['B','R']
xiangqi_variants = ['xiangqi', 'minixiangqi']
flipello_variants = ['flipello', 'flipello10']
amazons_variants = ['amazons']
oware_roles=['s1-piece','s2-piece','s3-piece','s4-piece','s5-piece','s6-piece','s7-piece','s8-piece','s9-piece','s10-piece',
's11-piece','s12-piece','s13-piece','s14-piece','s15-piece','s16-piece','s17-piece','s18-piece','s19-piece','s20-piece',
's21-piece','s22-piece','s23-piece','s24-piece','s25-piece','s26-piece','s27-piece','s28-piece','s29-piece','s30-piece',
's31-piece','s32-piece','s33-piece','s34-piece','s35-piece','s36-piece','s37-piece','s38-piece','s39-piece','s40-piece',
's41-piece','s42-piece','s43-piece','s44-piece','s45-piece','s46-piece','s47-piece','s48-piece']
togyzkumalak_base_image_names = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17',
'18', '19', '20', 't', 's10o']
togyzkumalak_extra_names = ['t', 's10o']
togyzkumalak_variants = ['togyzkumalak']
go_roles=['s-piece']
go_variants=['go9x9', 'go13x13', 'go19x19']
backgammon_base_image_names = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', 'flat','side', 'diceone', 'dicetwo', 'dicethree', 'dicefour', 'dicefive', 'dicesix']
backgammon_dice_names = ['diceone', 'dicetwo', 'dicethree', 'dicefour', 'dicefive', 'dicesix']
backgammon_extra_names = ['flat', 'side']
backgammon_directions = ['top', 'bottom']

# inline SVG Chess
chess_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_chess_game = colors.map { |color|
    roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'chess/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.chess.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_chess_variant = chess_variants.map{ |variant|
    colors.map { |color|
      roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'chess/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'chess-' + name + '.css', 'w') { |f| f.puts (classes_chess_game + classes_chess_variant).join("\n") }
}

# external SVG Chess
chess_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_chess_game = colors.map { |color|
    roles.map { |role|
      piece = color[0] + role.upcase[0]
      game_class = (role == 'man' || role == 'king') ? 'draughts' : 'chess'
      '.' + game_class + '.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + "chess/" + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_chess_variant = chess_variants.map { |variant|
    colors.map { |color|
      roles.map { |role|
        piece = color[0] + role.upcase[0]
        game_class = (role == 'man' || role == 'king') ? 'draughts' : 'chess'
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('/assets/piece/" + "chess/" + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'chess-' + name + '.external.css', 'w') { |f| f.puts (classes_chess_game + classes_chess_variant).join("\n") }
}

# inline SVG Draughts
draughts_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_draughts_game = colors.map { |color|
    draughts_roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'draughts/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.draughts.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_draughts_variant = draughts_variants.map{ |variant|
    colors.map { |color|
      draughts_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'draughts/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          playerIndex = (color == 'w' && !draughts_invert_colors.include?(variant)) || (color == 'b' && draughts_invert_colors.include?(variant)) ? 'p1' : 'p2'
          '.is2d .variant-' + variant + ' .' + role + '.' + playerIndex +
            ', .is2d.variant-' + variant + ' .' + role + '.' + playerIndex + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'draughts-' + name + '.css', 'w') { |f| f.puts (classes_draughts_game + classes_draughts_variant).join("\n") }
}
# external SVG Draughts
draughts_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_draughts_game = colors.map { |color|
    draughts_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.draughts.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + 'draughts/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_draughts_variant =  draughts_variants.map { |variant|
    colors.map { |color|
      draughts_roles.map { |role|
        piece = color[0] + role.upcase[0]
        playerIndex = (color == 'w' && !draughts_invert_colors.include?(variant)) || (color == 'b' && draughts_invert_colors.include?(variant)) ? 'p1' : 'p2'
        '.is2d .variant-' + variant + ' .' + role + '.' + playerIndex +
          ', .is2d.variant-' + variant + ' .' + role + '.' + playerIndex + ' {' +
          "background-image:url('/assets/piece/" + 'draughts/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'draughts-' + name + '.external.css', 'w') { |f| f.puts (classes_draughts_game + classes_draughts_variant).join("\n") }
}

# inline SVG loa
loa_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_loa_game = colors.map { |color|
      lines_of_action_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'loa/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.loa.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }.flatten
    classes_loa_variant = lines_of_action_variants.map{ |variant|
      colors.map { |color|
        lines_of_action_roles.map { |role|
          piece = color[0] + role.upcase[0]
          file = source_dir + 'loa/' + name + '/' + piece + '.' + ext
          File.open(file, 'r') do|image_file|
            image = image_file.read
            base64 = Base64.strict_encode64(image)
            '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
              "background-image:url('data:image/" + types[ext] + base64 + "')}"
          end
        }
      }
    }.flatten
    File.open(dest_dir + 'loa-' + name + '.css', 'w') { |f| f.puts (classes_loa_game + classes_loa_variant).join("\n") }
  }
# external SVG loa
loa_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_loa_game = colors.map { |color|
    lines_of_action_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.loa.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('/assets/piece/" + 'loa/' + name + "/" + piece + "." + ext + "')}"
      }
    }.flatten
    classes_loa_variant =  lines_of_action_variants.map { |variant|
      colors.map { |color|
      lines_of_action_roles.map { |role|
          piece = color[0] + role.upcase[0]
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('/assets/piece/" + 'loa/' + name + "/" + piece + "." + ext + "')}"
        }
      }
    }.flatten
    File.open(dest_dir + 'loa-' + name + '.external.css', 'w') { |f| f.puts (classes_loa_game + classes_loa_variant).join("\n") }
}
# inline SVG shogi
shogi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_shogi_game_and_variant = shogi_colors.map { |color|
    shogi_roles_to_imageprefix.map { |role_image|
      role = role_image[0]
      role_piece_prefix = role_image[1]
      piece = color[0] + role_piece_prefix
      file = source_dir + 'shogi/' + name + '/' + piece + '.' + ext
      color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.shogi.is2d .' + role + '.' + color_class + 
        ', ' + '.is2d .variant-shogi' + ' .' + role + '.' + color_class + 
        ', ' + '.is2d .variant-minishogi' + ' .' + role + '.' + color_class + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  File.open(dest_dir + 'shogi-' + name + '.css', 'w') { |f| f.puts (classes_shogi_game_and_variant).join("\n") }
}
# external SVG shogi
shogi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_shogi_game_and_variant = shogi_colors.map { |color|
    shogi_roles_to_imageprefix.map { |role_image|
      role = role_image[0]
      role_piece_prefix = role_image[1] 
      piece = color[0] + role_piece_prefix
      color_class = (color == '0' ? 'ally' : 'enemy') + (role == 'k-piece' ? (role_piece_prefix == 'OU' ? '.p2' : '.p1') : '')
      '.shogi.is2d .' + role + '.' + color_class +
        ', ' + '.is2d .variant-shogi' + ' .' + role + '.' + color_class + 
        ', ' + '.is2d .variant-minishogi' + ' .' + role + '.' + color_class + ' {' +
        "background-image:url('/assets/piece/" + 'shogi/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  File.open(dest_dir + 'shogi-' + name + '.external.css', 'w') { |f| f.puts (classes_shogi_game_and_variant).join("\n") }
}

# inline SVG Xiangqi
xiangqi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_xiangqi_game = xiangqi_colors.map { |color|
    xiangqi_roles.map { |role|
      piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
      file = source_dir + 'xiangqi/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.xiangqi.is2d .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_xiangqi_variant = xiangqi_variants.map{ |variant|
    xiangqi_colors.map { |color|
      xiangqi_roles.map { |role|
        piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
        file = source_dir + 'xiangqi/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'xiangqi-' + name + '.css', 'w') { |f| f.puts (classes_xiangqi_game + classes_xiangqi_variant).join("\n") }
}
# external SVG Xiangqi
xiangqi_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_xiangqi_game = xiangqi_colors.map { |color|
    xiangqi_roles.map { |role|
      piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
      '.xiangqi.is2d .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + 'xiangqi/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_xiangqi_variant = xiangqi_variants.map { |variant|
    xiangqi_colors.map { |color|
      xiangqi_roles.map { |role|
        piece = color[0] + (role == 'n-piece' ? 'H' : role == 'b-piece' ? 'E' : role.upcase[0])
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'R' ? 'p1' : 'p2') + ' {' +
          "background-image:url('/assets/piece/" + 'xiangqi/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'xiangqi-' + name + '.external.css', 'w') { |f| f.puts (classes_xiangqi_game + classes_xiangqi_variant).join("\n") }
}

# inline SVG flipello (reversi)
flipello_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_flipello = colors.map { |color|
    flipello_roles.map { |role|
      piece = color[0] + role.upcase[0]
      file = source_dir + 'flipello/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.flipello.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') +
         ', ' + '.is2d .variant-flipello' + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + 
         ', ' + '.is2d .variant-flipello10' + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  File.open(dest_dir + 'flipello-' + name + '.css', 'w') { |f| f.puts (classes_flipello).join("\n") }
}
# external SVG flipello
flipello_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_flipello = colors.map { |color|
    flipello_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.flipello.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + 
      ', ' + '.is2d .variant-flipello' + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + 
      ', ' + '.is2d .variant-flipello10' + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
        "background-image:url('/assets/piece/" + 'flipello/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  File.open(dest_dir + 'flipello-' + name + '.external.css', 'w') { |f| f.puts (classes_flipello).join("\n") }
}

# inline SVG amazons
amazons_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_amazons_game = colors.map { |color|
    amazons_roles.map { |role|
      piece = (role[0] == 'q' ? color[0] : '') + role.upcase[0]
      file = source_dir + 'amazons/' + name + '/' + piece + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.amazons.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
    }
  }.flatten
  classes_amazons_variant = amazons_variants.map{ |variant|
    colors.map { |color|
      amazons_roles.map { |role|
        piece = (role[0] == 'q' ? color[0] : '') + role.upcase[0]
        file = source_dir + 'amazons/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }
  }.flatten
  File.open(dest_dir + 'amazons-' + name + '.css', 'w') { |f| f.puts (classes_amazons_game + classes_amazons_variant).join("\n") }
}
# external SVG amazons
amazons_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_amazons_game = colors.map { |color|
    amazons_roles.map { |role|
      piece = (role[0] == 'q' ? color[0] : '') + role.upcase[0]
      '.amazons.is2d .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
        "background-image:url('/assets/piece/" + 'amazons/' + name + "/" + piece + "." + ext + "')}"
    }
  }.flatten
  classes_amazons_variant = amazons_variants.map { |variant|
    colors.map { |color|
      amazons_roles.map { |role|
        piece = (role[0] == 'q' ? color[0] : '') + role.upcase[0]
        '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p1' : 'p2') + ' {' +
          "background-image:url('/assets/piece/" + 'amazons/' + name + "/" + piece + "." + ext + "')}"
      }
    }
  }.flatten
  File.open(dest_dir + 'amazons-' + name + '.external.css', 'w') { |f| f.puts (classes_amazons_game + classes_amazons_variant).join("\n") }
}

# inline SVG oware
oware_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_oware = oware_roles.map { |role|
    count = role.split('-')[0][1..-1]
      file = source_dir + 'oware/' + name + '/' + count + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        '.oware.is2d .' + role + ', ' + '.is2d .variant-oware' + ' .' + role + ' {' +
          "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
  }.flatten
  File.open(dest_dir + 'oware-' + name + '.css', 'w') { |f| f.puts (classes_oware).join("\n") }
}
# external SVG oware
oware_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_oware = oware_roles.map { |role|
    count = role.split('-')[0][1..-1]
      '.oware.is2d .' + role + ', ' + '.is2d .variant-oware' + ' .' + role + ' {' +
        "background-image:url('/assets/piece/" + 'oware/' + name + "/" + count + "." + ext + "')}"
  }.flatten
  File.open(dest_dir + 'oware-' + name + '.external.css', 'w') { |f| f.puts (classes_oware).join("\n") }
}

# inline SVG togyzkumalak
togyzkumalak_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_togyzkumalak_game_and_variant = togyzkumalak_base_image_names.map { |image_name|
    if togyzkumalak_extra_names.include?(image_name)
      role = image_name + '-piece'
    else
      role = 's' + image_name + '-piece'
    end
    initial_css = '.togyzkumalak.is2d .' + role + ', ' + '.is2d .variant-togyzkumalak' + ' .' + role
    if !togyzkumalak_extra_names.include?(image_name) && image_name.to_i > 9 && image_name.to_i < 20
      for a in 1..15 do
        extra_role = 's' + (image_name.to_i + a*10).to_s + '-piece'
        if (image_name.to_i + a*10 <= 162 && !(a==1 && image_name=='10'))
          initial_css = initial_css + ', .togyzkumalak.is2d .' + extra_role + ', ' + '.is2d .variant-togyzkumalak' + ' .' + extra_role
        end
      end
    end
    file = source_dir + 'togyzkumalak/' + name + '/' + image_name + '.' + ext
      File.open(file, 'r') do|image_file|
        image = image_file.read
        base64 = Base64.strict_encode64(image)
        initial_css + ' {' + "background-image:url('data:image/" + types[ext] + base64 + "')}"
      end
  }.flatten
  File.open(dest_dir + 'togyzkumalak-' + name + '.css', 'w') { |f| f.puts (classes_togyzkumalak_game_and_variant).join("\n") }
}
# external SVG togyzkumalak
togyzkumalak_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_togyzkumalak_game_and_variant = togyzkumalak_base_image_names.map { |image_name|
    if togyzkumalak_extra_names.include?(image_name)
      role = image_name + '-piece'
    else
      role = 's' + image_name + '-piece'
    end
    initial_css = '.togyzkumalak.is2d .' + role + ', ' + '.is2d .variant-togyzkumalak' + ' .' + role
    if !togyzkumalak_extra_names.include?(image_name) && image_name.to_i > 9 && image_name.to_i < 20
      for a in 1..15 do
        extra_role = 's' + (image_name.to_i + a*10).to_s + '-piece'
        if (image_name.to_i + a*10 <= 162 && !(a==1 && image_name=='10'))
          initial_css = initial_css + ', .togyzkumalak.is2d .' + extra_role + ', ' + '.is2d .variant-togyzkumalak' + ' .' + extra_role
        end
      end
    end        
      initial_css + ' {' +
        "background-image:url('/assets/piece/" + 'togyzkumalak/' + name + "/" + image_name + "." + ext + "')}"
  }.flatten
  File.open(dest_dir + 'togyzkumalak-' + name + '.external.css', 'w') { |f| f.puts (classes_togyzkumalak_game_and_variant).join("\n") }
}

# inline SVG go
go_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_go_game = colors.map { |color|
      go_roles.map { |role|
        piece = color[0] + role.upcase[0]
        file = source_dir + 'go/' + name + '/' + piece + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          '.go.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
      }
    }.flatten
    classes_go_variant = go_variants.map{ |variant|
      colors.map { |color|
        go_roles.map { |role|
          piece = color[0] + role.upcase[0]
          file = source_dir + 'go/' + name + '/' + piece + '.' + ext
          File.open(file, 'r') do|image_file|
            image = image_file.read
            base64 = Base64.strict_encode64(image)
            '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
              "background-image:url('data:image/" + types[ext] + base64 + "')}"
          end
        }
      }
    }.flatten
    File.open(dest_dir + 'go-' + name + '.css', 'w') { |f| f.puts (classes_go_game + classes_go_variant).join("\n") }
  }
# external SVG go
go_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_go_game = colors.map { |color|
    go_roles.map { |role|
      piece = color[0] + role.upcase[0]
      '.go.is2d .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
          "background-image:url('/assets/piece/" + 'go/' + name + "/" + piece + "." + ext + "')}"
      }
    }.flatten
    classes_go_variant =  go_variants.map { |variant|
      colors.map { |color|
      go_roles.map { |role|
          piece = color[0] + role.upcase[0]
          '.is2d .variant-' + variant + ' .' + role + '.' + (color == 'w' ? 'p2' : 'p1') + ' {' +
            "background-image:url('/assets/piece/" + 'go/' + name + "/" + piece + "." + ext + "')}"
        }
      }
    }.flatten
    File.open(dest_dir + 'go-' + name + '.external.css', 'w') { |f| f.puts (classes_go_game + classes_go_variant).join("\n") }
}

# inline SVG backgammon
backgammon_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_backgammon_game_and_variant = backgammon_base_image_names.map { |image_name|
   colors.map { |color|
    backgammon_directions.map { |direction|
      if backgammon_extra_names.include?(image_name)
        role = '.' + image_name + '-piece'
        image_pos = ''
        pos_class = ''
      elsif backgammon_dice_names.include?(image_name)
        role = 'cg-dice'
        image_pos = ''
        pos_class = ' dice.' + image_name[4..-1]
      else
        role = '.s' + image_name + '-piece'
        image_pos = direction[0]
        pos_class = '.' + direction
      end
      initial_css = '.backgammon.is2d ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
       ', ' + '.is2d .variant-backgammon ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
       ', ' + '.is2d .variant-nackgammon ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class
      file = source_dir + 'backgammon/' + name + '/' + color + image_name + image_pos + '.' + ext
        File.open(file, 'r') do|image_file|
          image = image_file.read
          base64 = Base64.strict_encode64(image)
          initial_css + ' {' + "background-image:url('data:image/" + types[ext] + base64 + "')}"
        end
    }
  }
  }.flatten
  classes_backgammon_buttons = colors.map { |color|
    if name === 'wooden'
      bg_colour = color == 'w' ? "#F3C977" : "#692819"
      border_colour = color == 'b' ? "#F3C977" : "#692819"
    elsif name === 'contemporary'
      bg_colour = color == 'w' ? "#D75049" : "#414143"
      border_colour = "#F3F0E9"
    else #classic
      bg_colour = color == 'w' ? "white" : "black"
      border_colour = color == 'b' ? "white" : "black"
    end
    pos_class = ' cg-button'
      initial_css = '.backgammon.is2d ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
      ', ' + '.is2d .variant-backgammon ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
      ', ' + '.is2d .variant-nackgammon ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class
        initial_css + ' {' + "background: " + bg_colour + ";" + 
        " color: " + border_colour + ";" +
        " border: " + border_colour + ";" + 
        " border-width: medium; border-style: solid; " + "}"
  }.flatten
  File.open(dest_dir + 'backgammon-' + name + '.css', 'w') { |f| f.puts (classes_backgammon_game_and_variant + classes_backgammon_buttons).join("\n") }
}
# external SVG backgammon
backgammon_themes.map { |theme|
  name = theme[0]
  ext = theme[1]
  classes_backgammon_game_and_variant = backgammon_base_image_names.map { |image_name|
   colors.map { |color|
    backgammon_directions.map { |direction|
        if backgammon_extra_names.include?(image_name)
          role = '.' + image_name + '-piece'
          image_pos = ''
          pos_class = ''
        elsif backgammon_dice_names.include?(image_name)
          role = 'cg-dice'
          image_pos = ''
          pos_class = ' dice.' + image_name[4..-1]
        else
          role = '.s' + image_name + '-piece'
          image_pos = direction[0]
          pos_class = '.' + direction
        end
        initial_css = '.backgammon.is2d ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class +
         ', ' + '.is2d .variant-backgammon ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class +
         ', ' + '.is2d .variant-nackgammon ' + role + '.' + (color == 'w' ? 'p1' : 'p2') + pos_class
        initial_css + ' {' +
          "background-image:url('/assets/piece/" + 'backgammon/' + name + "/" + color + image_name + image_pos + "." + ext + "')}"
    }
  }
  }.flatten
  classes_backgammon_buttons = colors.map { |color|
    if name === 'wooden'
      bg_colour = color == 'w' ? "#F3C977" : "#692819"
      border_colour = color == 'b' ? "#F3C977" : "#692819"
    elsif name === 'contemporary'
      bg_colour = color == 'w' ? "#D75049" : "#414143"
      border_colour = "#F3F0E9"
    else #classic
      bg_colour = color == 'w' ? "white" : "black"
      border_colour = color == 'b' ? "white" : "black"
    end
    pos_class = ' cg-button'
      initial_css = '.backgammon.is2d ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
      ', ' + '.is2d .variant-backgammon ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class + 
      ', ' + '.is2d .variant-nackgammon ' + 'cg-buttons.' + (color == 'w' ? 'p1' : 'p2') + pos_class
        initial_css + ' {' + "background: " + bg_colour + ";" + 
        " color: " + border_colour + ";" +
        " border: " + border_colour + ";" + 
        " border-width: medium; border-style: solid; " + "}"
  }.flatten
  File.open(dest_dir + 'backgammon-' + name + '.external.css', 'w') { |f| f.puts (classes_backgammon_game_and_variant + classes_backgammon_buttons).join("\n") }
}

