name: Build assets

on:
  push:
    paths:
      - '.github/workflows/assets.yml'
      - 'public/**'
      - 'ui/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    paths:
      - '.github/workflows/assets.yml'
      - 'public/**'
      - 'ui/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      #add back end options to ensure full build gets triggered
      - 'app/**'
      - 'conf/**'
      - 'modules/**'
      - 'project/**'
      - 'translation/source/**'
      - 'build.sbt'
      - 'lila'

jobs:
  assets:
    runs-on: ubuntu-latest
    steps:
      - name: Check if organization member
        id: check_org_member
        uses: Mind-Sports-Games/check-org-member@v1.1.0
        with:
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check Failed
        if: ${{ steps.check_org_member.outputs.result == 'false' }}
        run: |
          echo User Does Not Belong to Mind-Sports-Games
          exit 1
      - name: Check Passed
        run: echo The actor is an organization member
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MSO_CI_SSH_KEY }}
      # - run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      # id: yarn-cache
      # - uses: actions/cache@v4
      #   with:
      #     path: ${{ steps.yarn-cache.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
      #     restore-keys: ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v4
        with:
          run_install: |
            - recursive: false
              args: [--no-frozen-lockfile, --strict-peer-dependencies]
      - run: ./ui/build --no-install -p
      # - run: yarn install --network-concurrency 1
      # - run: ./ui/build prod
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v2.0
        with:
          timeZone: 8
          format: 'YYYYMMDD-HHmmss'
      - name: Master -- S3 Sync Assets
        uses: jakejarvis/s3-sync-action@master
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-2'
          SOURCE_DIR: 'public'
          DEST_DIR: 'assets-${{ steps.time.outputs.time }}'
      - name: Master -- S3 Sync Assets 2
        uses: jakejarvis/s3-sync-action@master
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-2'
          SOURCE_DIR: 'public'
          DEST_DIR: 'assets'
      - name: Dev -- S3 Sync Assets
        uses: jakejarvis/s3-sync-action@master
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_DEV_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-2'
          SOURCE_DIR: 'public'
          DEST_DIR: 'assets-${{ steps.time.outputs.time }}'
      - name: Dev -- S3 Sync Assets 2
        uses: jakejarvis/s3-sync-action@master
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_DEV_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'eu-west-2'
          SOURCE_DIR: 'public'
          DEST_DIR: 'assets'
      - run: mkdir assets && mv public assets/ && cp LICENSE COPYING.md README.md assets/ && git log -n 1 --pretty=oneline > assets/commit.txt
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') && github.event_name == 'push'
      - run: cd assets && tar -cvpJf ../assets.tar.xz . && cd -
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') && github.event_name == 'push'
        env:
          XZ_OPT: '-0'
      - uses: actions/upload-artifact@v4
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev') && github.event_name == 'push'
        with:
          name: lila-assets
          path: assets.tar.xz
